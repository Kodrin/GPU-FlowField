#pragma kernel FlowField
#pragma kernel Particles

#define X_THREAD_COUNT 512
#define Y_THREAD_COUNT 1
#define Z_THREAD_COUNT 1

#define DISCARD_FLOWFIELD if((int)id.x >= _FlowPointAmount) return;
#define DISCARD_PARTICLE if((int)id.x >= _ParticleAmount) return;

#include "DataStructs.cginc"
#include "Voronoi3D.cginc"
#include "Worley.cginc"

float3 _BoundsDimensions;
float3 _BoundsPosition;
uint _XCellCount;
uint _YCellCount;
uint _ZCellCount;

float _ParticleSpeed;
float _RotationSpeed;
float _DeltaTime;

float _Jitter;
float _VorToWorley;

int _FlowPointAmount;
int _ParticleAmount;

RWStructuredBuffer<FlowFieldPointData> _FlowFieldPointBuffer;
RWStructuredBuffer<ParticleData> _ParticleBuffer;

//TO REPEAT PARTICLE POSITION AT THE EDGES
float3 LoopPosition(inout float3 position)
{
	// x axis
	if(position.x > _BoundsDimensions.x/2 + _BoundsPosition.x)
	{
		position.x = -_BoundsDimensions.x/2 + _BoundsPosition.x;
	}
	if(position.x < -_BoundsDimensions.x/2 + _BoundsPosition.x)
	{
		position.x = _BoundsDimensions.x/2 + _BoundsPosition.x;
	}
	
	//y axis
	if(position.y > _BoundsDimensions.y/2 + _BoundsPosition.y)
	{
		position.y = -_BoundsDimensions.y/2 + _BoundsPosition.y;
	}
	
	if(position.y < -_BoundsDimensions.y/2 + _BoundsPosition.y)
	{
		position.y = _BoundsDimensions.y/2 + _BoundsPosition.y;
	}
	
	//z axis 
	if(position.z > _BoundsDimensions.z/2 + _BoundsPosition.z)
	{
		position.z = -_BoundsDimensions.z/2 + _BoundsPosition.z;
	}
	if(position.z < -_BoundsDimensions.z/2 + _BoundsPosition.z)
	{
		position.z = _BoundsDimensions.z/2 + _BoundsPosition.z;
	}
	return position;
}

//GRABS THE FLOWFIELD GRID INDEX POSITION BASED ON CURRENT POSITION WITHIN GRID
uint GrabGridIndex(float3 position)
{
    float x = floor((position.x - (_BoundsPosition.x - _BoundsDimensions.x/2)) / ((_BoundsDimensions.x / _XCellCount)));
    float y = floor((position.y - (_BoundsPosition.y - _BoundsDimensions.y/2)) / ((_BoundsDimensions.y / _YCellCount)));
    float z = floor((position.z - (_BoundsPosition.z - _BoundsDimensions.z/2)) / ((_BoundsDimensions.z / _ZCellCount)));
    
    uint flowFieldIndex = (x * _YCellCount + y) * _ZCellCount + z;
    return flowFieldIndex;
}

[numthreads(X_THREAD_COUNT,Y_THREAD_COUNT,Z_THREAD_COUNT)]
void FlowField (uint3 id : SV_DispatchThreadID)
{
        DISCARD_FLOWFIELD
        int idx = id.x;
        FlowFieldPointData flowPoint = _FlowFieldPointBuffer[idx];
        
        float3 vorNoise = voronoiNoise(flowPoint.position);
        float3 worleyNoise = float3(worley(flowPoint.position, _Jitter, false), random(flowPoint.position.xy));
        
        float3 flowDirection = lerp(vorNoise, worleyNoise, _VorToWorley);
        flowPoint.direction = normalize(flowDirection);
        
        _FlowFieldPointBuffer[idx] = flowPoint;
    

}

[numthreads(X_THREAD_COUNT,Y_THREAD_COUNT,Z_THREAD_COUNT)]
void Particles (uint3 id : SV_DispatchThreadID)
{
        
        DISCARD_PARTICLE
        int idx = id.x;
        ParticleData particle = _ParticleBuffer[idx];
        
        uint flowIndex = GrabGridIndex(particle.position);
        float3 flowDirection = _FlowFieldPointBuffer[flowIndex].direction;
        
        float rotation = exp(-_RotationSpeed * _DeltaTime);
        
        particle.direction = lerp((flowDirection), normalize(particle.direction), rotation);
        particle.position += particle.direction * (particle.speed * _ParticleSpeed);
        
        LoopPosition(particle.position);
        _ParticleBuffer[idx] = particle;
    
}
